{
  "version": 3,
  "sources": ["../../../src/react/cfb-schedule.tsx"],
  "sourcesContent": ["import * as React from 'react';\nconst { useState, useEffect, useCallback } = React;\n\ninterface Team {\n  id: string;\n  name: string;\n  shortName: string;\n  logo: string;\n  rank?: number;\n  conference: string;\n  score?: number;\n}\n\ninterface Game {\n  id: string;\n  date: string;\n  time: string;\n  datetime: string;\n  week: number;\n  homeTeam: Team;\n  awayTeam: Team;\n  venue: string;\n  location: string;\n  tv: string;\n  status: string;\n  isCompleted: boolean;\n  spread?: string;\n}\n\ninterface ScheduleData {\n  games: Game[];\n  weeks: Array<{ value: string; label: string }>;\n  lastUpdated: string;\n}\n\ninterface Filters {\n  week: string;\n  conference: string;\n  status: string;\n  rankedOnly: boolean;\n}\n\nconst CFBSchedule: React.FC = () => {\n  const [scheduleData, setScheduleData] = useState<ScheduleData | null>(null);\n  const [filteredGames, setFilteredGames] = useState<Game[]>([]);\n  const [filters, setFilters] = useState<Filters>({\n    week: '',\n    conference: '',\n    status: '',\n    rankedOnly: false\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const getGameStatusCategory = useCallback((status: string, isCompleted: boolean): string => {\n    if (isCompleted) return 'completed';\n    if (status.includes('Q') || status.includes('Half') || status.includes('OT')) return 'live';\n    return 'scheduled';\n  }, []);\n\n  const hasLiveGames = useCallback((): boolean => {\n    if (!filteredGames) return false;\n    return filteredGames.some(game => \n      getGameStatusCategory(game.status, game.isCompleted) === 'live'\n    );\n  }, [filteredGames, getGameStatusCategory]);\n\n  const loadSchedule = useCallback(async () => {\n    setLoading(true);\n    setError(false);\n\n    try {\n      const url = new URL('/api/cfb-schedule', (window as any).location.origin);\n      if (filters.week) {\n        url.searchParams.set('week', filters.week);\n      }\n\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}`);\n      }\n\n      const data = await response.json() as ScheduleData;\n      setScheduleData(data);\n    } catch (err) {\n      console.error('Error loading schedule:', err);\n      setError(true);\n    } finally {\n      setLoading(false);\n    }\n  }, [filters.week]);\n\n  const applyFilters = useCallback(() => {\n    if (!scheduleData?.games) return;\n\n    const filtered = scheduleData.games.filter(game => {\n      // Week filter\n      if (filters.week && game.week.toString() !== filters.week) {\n        return false;\n      }\n\n      // Conference filter\n      if (filters.conference) {\n        const hasConference = game.homeTeam.conference === filters.conference ||\n                            game.awayTeam.conference === filters.conference;\n        if (!hasConference) return false;\n      }\n\n      // Status filter\n      if (filters.status) {\n        const gameStatus = getGameStatusCategory(game.status, game.isCompleted);\n        if (gameStatus !== filters.status) return false;\n      }\n\n      // Ranked teams filter\n      if (filters.rankedOnly) {\n        const hasRankedTeam = game.homeTeam.rank || game.awayTeam.rank;\n        if (!hasRankedTeam) return false;\n      }\n\n      return true;\n    });\n\n    setFilteredGames(filtered);\n  }, [scheduleData, filters, getGameStatusCategory]);\n\n  const groupGamesByDate = useCallback((games: Game[]) => {\n    const grouped: Record<string, Game[]> = {};\n    games.forEach(game => {\n      if (!grouped[game.date]) {\n        grouped[game.date] = [];\n      }\n      const gameArray = grouped[game.date];\n      if (gameArray) {\n        gameArray.push(game);\n      }\n    });\n\n    // Sort games within each date by time\n    Object.keys(grouped).forEach(date => {\n      const games = grouped[date];\n      if (games) {\n        games.sort((a, b) => new Date(a.datetime).getTime() - new Date(b.datetime).getTime());\n      }\n    });\n\n    return grouped;\n  }, []);\n\n  // Load schedule on mount\n  useEffect(() => {\n    loadSchedule();\n  }, [loadSchedule]);\n\n  // Apply filters when data or filters change\n  useEffect(() => {\n    applyFilters();\n  }, [applyFilters]);\n\n  // Auto-refresh for live games\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (hasLiveGames()) {\n        loadSchedule();\n      }\n    }, 300000); // 5 minutes\n\n    return () => clearInterval(interval);\n  }, [hasLiveGames, loadSchedule]);\n\n  const handleFilterChange = (key: keyof Filters, value: string | boolean) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const GameCard: React.FC<{ game: Game }> = ({ game }) => {\n    const gameStatus = getGameStatusCategory(game.status, game.isCompleted);\n    const statusClass = gameStatus === 'live' ? 'live' : gameStatus === 'completed' ? 'completed' : 'scheduled';\n\n    return (\n      <div className={`game-card ${statusClass}`}>\n        <div className=\"game-header\">\n          <span className=\"game-time\">{game.time}</span>\n          <span className={`game-status ${statusClass}`}>{game.status}</span>\n        </div>\n\n        <div className=\"teams\">\n          <div className=\"team away-team\">\n            <div className=\"team-info\">\n              <img \n                src={game.awayTeam.logo} \n                alt={game.awayTeam.name} \n                className=\"team-logo\"\n                onError={(e) => {\n                  (e.target as HTMLImageElement).src = '/images/logos/default-logo.png';\n                }}\n              />\n              <div className=\"team-details\">\n                <div className=\"team-name\">\n                  {game.awayTeam.rank && <span className=\"rank\">#{game.awayTeam.rank}</span>}\n                  {game.awayTeam.shortName}\n                </div>\n                <div className=\"team-conference\">{game.awayTeam.conference}</div>\n              </div>\n            </div>\n            <div className=\"team-score\">\n              {(game.isCompleted || gameStatus === 'live') ? game.awayTeam.score : ''}\n            </div>\n          </div>\n\n          <div className=\"vs-separator\">@</div>\n\n          <div className=\"team home-team\">\n            <div className=\"team-info\">\n              <img \n                src={game.homeTeam.logo} \n                alt={game.homeTeam.name} \n                className=\"team-logo\"\n                onError={(e) => {\n                  (e.target as HTMLImageElement).src = '/images/logos/default-logo.png';\n                }}\n              />\n              <div className=\"team-details\">\n                <div className=\"team-name\">\n                  {game.homeTeam.rank && <span className=\"rank\">#{game.homeTeam.rank}</span>}\n                  {game.homeTeam.shortName}\n                </div>\n                <div className=\"team-conference\">{game.homeTeam.conference}</div>\n              </div>\n            </div>\n            <div className=\"team-score\">\n              {(game.isCompleted || gameStatus === 'live') ? game.homeTeam.score : ''}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"game-details\">\n          <div className=\"venue-info\">\n            <span className=\"venue\">{game.venue}</span>\n            <span className=\"location\">{game.location}</span>\n          </div>\n          <div className=\"broadcast-info\">\n            <span className=\"tv\">{game.tv}</span>\n            {game.spread && <span className=\"spread\">{game.spread}</span>}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const DateSection: React.FC<{ date: string; games: Game[] }> = ({ games }) => {\n    const dateObj = new Date(games[0]?.datetime || '');\n    const formattedDate = dateObj.toLocaleDateString('en-US', { \n      weekday: 'long', \n      year: 'numeric', \n      month: 'long', \n      day: 'numeric' \n    });\n\n    return (\n      <div className=\"date-section\">\n        <h2 className=\"date-header\">{formattedDate}</h2>\n        <div className=\"games-grid\">\n          {games.map(game => (\n            <GameCard key={game.id} game={game} />\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  const gamesByDate = groupGamesByDate(filteredGames);\n\n  return (\n    <>\n      <div className=\"schedule-controls\">\n        <div className=\"filter-controls\">\n          <div className=\"filter-group\">\n            <label htmlFor=\"week-filter\">Week</label>\n            <select\n              id=\"week-filter\"\n              value={filters.week}\n              onChange={(e) => handleFilterChange('week', (e.target as HTMLSelectElement).value)}\n            >\n              <option value=\"\">All Weeks</option>\n              {scheduleData?.weeks?.map(week => (\n                <option key={week.value} value={week.value}>{week.label}</option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"filter-group\">\n            <label htmlFor=\"conference-filter\">Conference</label>\n            <select\n              id=\"conference-filter\"\n              value={filters.conference}\n              onChange={(e) => handleFilterChange('conference', (e.target as HTMLSelectElement).value)}\n            >\n              <option value=\"\">All Conferences</option>\n              <option value=\"Big Ten\">Big Ten</option>\n              <option value=\"SEC\">SEC</option>\n              <option value=\"ACC\">ACC</option>\n              <option value=\"Big 12\">Big 12</option>\n              <option value=\"Pac-12\">Pac-12</option>\n              <option value=\"Mountain West\">Mountain West</option>\n              <option value=\"American Athletic\">American Athletic</option>\n              <option value=\"Conference USA\">Conference USA</option>\n              <option value=\"MAC\">MAC</option>\n              <option value=\"Sun Belt\">Sun Belt</option>\n            </select>\n          </div>\n\n          <div className=\"filter-group\">\n            <label htmlFor=\"status-filter\">Game Status</label>\n            <select\n              id=\"status-filter\"\n              value={filters.status}\n              onChange={(e) => handleFilterChange('status', (e.target as HTMLSelectElement).value)}\n            >\n              <option value=\"\">All Games</option>\n              <option value=\"scheduled\">Scheduled</option>\n              <option value=\"live\">Live</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </div>\n\n          <div className=\"filter-group\">\n            <label htmlFor=\"ranked-filter\">\n              <input\n                type=\"checkbox\"\n                id=\"ranked-filter\"\n                checked={filters.rankedOnly}\n                onChange={(e) => handleFilterChange('rankedOnly', (e.target as HTMLInputElement).checked)}\n              />\n              Ranked Teams Only\n            </label>\n          </div>\n        </div>\n\n        <div className=\"refresh-controls\">\n          <button\n            id=\"refresh-btn\"\n            className=\"btn btn-primary\"\n            onClick={() => loadSchedule()}\n            disabled={loading}\n          >\n            <span className=\"refresh-icon\">\uD83D\uDD04</span> Refresh\n          </button>\n          {scheduleData?.lastUpdated && (\n            <span className=\"last-updated\">\n              Last updated: {new Date(scheduleData.lastUpdated).toLocaleTimeString()}\n            </span>\n          )}\n        </div>\n      </div>\n\n      {loading && (\n        <div className=\"loading\">\n          <div className=\"spinner\"></div>\n          <p>Loading schedule...</p>\n        </div>\n      )}\n\n      {error && (\n        <div className=\"error-message\">\n          <p>\u26A0\uFE0F Unable to load schedule data</p>\n          <button id=\"retry-btn\" className=\"btn\" onClick={() => loadSchedule()}>\n            Try Again\n          </button>\n        </div>\n      )}\n\n      {!loading && !error && (\n        <div id=\"schedule-container\">\n          {filteredGames.length === 0 ? (\n            <div className=\"no-games\">\n              <p>No games found matching your filters.</p>\n            </div>\n          ) : (\n            Object.keys(gamesByDate).map(date => (\n              <DateSection key={date} date={date} games={gamesByDate[date] || []} />\n            ))\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default CFBSchedule;"],
  "mappings": "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",
  "names": ["games"]
}
